package com.pbertoni.cassandra;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Metadata;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.BoundStatement;
import com.datastax.driver.core.PreparedStatement;

import java.io.*;
import java.net.*;
import java.nio.ByteBuffer;
import java.util.Arrays;

public class CassandraConnector {
   private Session session;
   private String applicationName = "ProvaApplicationName";
   private String checkpointId = "ProvaCheckpointId";
   private String compositionName = "ProvaCompositionName";
   private byte[] buffer;

   public CassandraConnector() {
   }

   /**
    * Connects to the specified node.
    * @param node a host name or IP address of the node in the cluster
    */
   public void connect(String node) {
      Cluster cluster = Cluster.builder()
            .addContactPoint(node)
            // .withSSL() // uncomment if using client to node encryption
            .build();
      Metadata metadata = cluster.getMetadata();
      System.out.printf("Connected to cluster: %s\n", 
            metadata.getClusterName());
      session = cluster.connect();
   }


    public void createSchema() {
      session.execute(
            "CREATE KEYSPACE blockmon WITH replication " +
            "= {'class':'SimpleStrategy', 'replication_factor':1};");
      // create songs and playlist tables
      session.execute(
            "CREATE TABLE blockmon.checkpointed_states_new (" +
                  "application_name text," +
                  "composition_name text," +
                  "checkpoint_id text," +
                  "state blob," +
		  "PRIMARY KEY (application_name, composition_name, checkpoint_id)" +
              ");");

  } 
   /**
    * Loads some data into the schema so that we can query the tables.
    */
   public void loadData(int size) {
      // insert data in the tables
      PreparedStatement prep = session.prepare("insert into blockmon.checkpointed_states_new (application_name, state, checkpoint_id, composition_name) values ('" 
	+ applicationName + "', ?, '" + checkpointId + "', '" + compositionName + "');");

      /*
	for(int i = 0; i < size; i++){
	      System.out.printf("%02X", buffer[i]);
      }
      System.out.println("\n");
      */

      System.out.println("Size of the state: " + size);

      ByteBuffer buf = ByteBuffer.wrap(buffer,0,size);
 
      session.execute(prep.bind(buf));
      System.out.println("Data loaded.");
   }
   
   /**
    * Queries the songs and playlists tables for data.
    */

   /**
    * Returns the current session.
    * @return the current session to execute statements on
    */
   public Session getSession() {
      return this.session;
   }
   
   // used by the workaround method in the BoundStatementsclient child class.
   void setSession(Session session) {
   	this.session = session;
   }

   /**
    * Shuts down the session and its cluster.
    */
   public void close() {
      session.shutdown();
      session.getCluster().shutdown();
   }
   
   public int receiveOnSocket() {
      int toread = 0;
      ServerSocket sockAccept;
      Socket sockConn;
      InputStream is = null;
      OutputStream os = null;

      try {
         System.out.println ("Waiting for Client");
         sockAccept = new ServerSocket(4444);
         sockConn = sockAccept.accept();
         is = sockConn.getInputStream();
         os = sockConn.getOutputStream();
	
	 byte[] bytebuffer = new byte[102400];

         try {

            try {
               // read first number of bytes to transfer and composition name
               int needed = 128;
               while (true) {
                  int read = is.read(bytebuffer, 128 - needed, needed);
                  needed = needed - read;
                  if(needed == 0)
                     break;
               }
/*
               toread = (bytebuffer[0]) & 0xFF;
               toread = toread << 8 | (bytebuffer[1] & 0xFF);
               toread = toread << 8 | (bytebuffer[2] & 0xFF);
               toread = toread << 8 | (bytebuffer[3] & 0xFF);

               compositionName = new String(bytebuffer, 4, 124, "UTF-8");
 */              

                toread = (bytebuffer[0]) & 0xFF;
                toread = toread << 8 | (bytebuffer[1] & 0xFF);
                toread = toread << 8 | (bytebuffer[2] & 0xFF);
  		toread = toread << 8 | (bytebuffer[3] & 0xFF);
		int kk;
		for(kk = 0; kk < 124; kk++)
			if(bytebuffer[kk + 4] == 0)
				break;
                compositionName = new String(bytebuffer, 4, kk, "UTF-8");




	       needed = toread;
               buffer = new byte[needed];

               int offset = 0;

               while(needed > 0) {
                  //int read = is.read(bytebuffer, offset, needed);
                  int read = is.read(buffer, offset, needed);
                  needed = needed - read;
                  offset = offset + read;
               }

               byte[] retVal = new byte[1];
               retVal[0] = '1';

               os.write(retVal, 0, 1);

               System.out.println("done");
            } finally {
               is.close();
               sockConn.close();
               sockAccept.close();
            }
         } catch (IOException e) {
            System.err.println("IO failed.");
            System.exit(1);
         }
      } catch (IOException e) {
         System.err.println("Accept failed.");
         System.exit(1);
      }
      return toread;
   }


 public void querySchema() {
      ResultSet results = session.execute(
            "SELECT * FROM system.schema_keyspaces" +
            "WHERE keyspace_name = 'blockmon';");
      System.out.println(String.format("%-30s\t%-20s\t%-20s\n%s", "title", "album", "artist",
            "-------------------------------+-----------------------+--------------------"));
      for (Row row : results) {
         System.out.println(String.format("%-30s\t%-20s\t%-20s", row.getString("title"),
               row.getString("album"),  row.getString("artist")));
      }
      System.out.println();
   }

 public void dropSchema(String keyspace) {
      getSession().execute("DROP KEYSPACE " + keyspace);
      System.out.println("Finished dropping " + keyspace + " keyspace.");
   }

   /**
    * Creates  simple client application that illustrates connecting to
    * a Cassandra cluster. retrieving metadata, creating a schema,
    * loading data into it, and then querying it.
    * @param args ignored
    */
   public static void main(String[] args) {
     while(true){ 
      byte[] byteState = new byte[102400];
	

      CassandraConnector client = new CassandraConnector();
      
      //int length = client.receiveOnSocket();
      //System.out.println("Ricevuto stato di dimensione" + length);
      
      //client.connect("10.20.10.50");
      //client.dropSchema("blockmon");
      //client.createSchema();

      int length = client.receiveOnSocket();
      System.out.println("Ricevuto stato di dimensione" + length);
       client.connect("10.20.10.50");
      client.loadData(length);

     // client.dropSchema("blockmon");
      client.close();
    }
   }

}
